{"version":3,"sources":["../../src/jewishDateCore.ts","../../src/utils/testUtils.ts","../../src/day.tsx","../../src/weekday.tsx","../../src/navigation.tsx","../../src/reactJewishDatePicker.tsx","reactJewishDatePickerExample/ReactJewishDatePickerExample.tsx","app.tsx","serviceWorker.ts","index.tsx"],"names":["dayjs","Dayjs.default","HeDate","heDate.default","hebrewDate","hebrewDateN.default","isValidDate","date","Object","prototype","toString","call","getWeekdays","isHebrew","convertToHebrew","num","addGeresh","addPunctuate","geresh","punctuate","getHebJewishMonths","id","text","getJewishMonths","year","months","yearindex","isMeubar","filter","month","map","getJewishYears","years","i","element","push","getPrevMonth","basicJewishMonthInfo","result","monthIndex","indexOf","length","getNextMonth","getGregDate","props","monthName","day","Date","HDate","greg","formatJewishDate","jewishDate","formatJewishDateHebrew","monthId","getHebJewishMonthById","getJewishDate","hebDate","month_name","IsJewishDatesEqual","jewishDate1","jewishDate2","getJewishMonth","jewishMonthInfo","startOfJewishMonth","subtract","dayOfWeek","Number","format","sundayStartOfTheMonth","jewishMonth","getJewishMonthInfo","selectedDay","jewishYear","jewishMonthString","days","currentDate","toDate","jewishDateStr","jewishDateStrHebrew","dayjsDate","isCurrentMonth","getDay","add","isFromTest","process","undefined","JEST_WORKER_ID","getTestID","testId","Day","title","classNames","React.createElement","className","onClick","basicJewishDay","Weekday","value","Navigation","onChange","e","currentTarget","key","y","ReactJewishDatePicker","Error","dateInit","React.useState","setDate","setSelectedDay","isOpen","setOpen","ref","React.useRef","handleClick","selectedDayClass","basicJewishDate","gregDate","setBasicJewishDate","weekday","index","ReactJewishDatePickerExample","React","setBasicJewishDay","setIsHebrew","type","checked","JSON","stringify","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.9737d017.chunk.js","sourcesContent":["import * as hebrewDateN from 'hebrew-date';\r\nimport * as heDate from 'hebcal';\r\nimport gematriya from 'gematriya';\r\nimport * as Dayjs from 'dayjs';\r\nimport { JewishDate, JewishDay, JewishMonthInfo, JewishMonth, BasicJewishMonthInfo, IdText, BasicJewishDate } from './interfaces';\r\nconst dayjs = Dayjs.default;\r\nconst HeDate = heDate.default;\r\nconst hebrewDate = hebrewDateN.default;\r\n\r\nexport function isValidDate(date: Date | BasicJewishDate): date is Date {\r\n    return date && Object.prototype.toString.call(date) === \"[object Date]\";\r\n  }\r\n\r\nexport const isMeubar = (year): boolean => {\r\n    const yearindex = year % 19;\r\n    return (yearindex === 0 || yearindex === 3 || yearindex === 6 || yearindex === 8 || yearindex === 11 || yearindex === 14 || yearindex === 17);\r\n}\r\n\r\nexport const getHebWeekdays = (): string[] => {\r\n    return ['א', 'ב', 'ג', 'ד', 'ה', 'ו', 'ש'];\r\n};\r\n\r\nexport const getEngWeekdays = (): string[] => {\r\n    return ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'];\r\n};\r\n\r\nexport const getWeekdays = (isHebrew: boolean): string[] => {\r\n    return isHebrew ? getHebWeekdays() : getEngWeekdays();\r\n};\r\n\r\nexport const convertToHebrew = (num: number, addGeresh = true, addPunctuate = true): string => {\r\n    return gematriya(num, { geresh: addGeresh, punctuate: addPunctuate });\r\n}\r\n\r\nexport const getHebJewishMonthById = (monthId: string): string => {\r\n    const months = getHebJewishMonths();\r\n    const monthIndex = months.map((month) => month.id).indexOf(monthId);\r\n\r\n    return months[monthIndex].text;\r\n};\r\n\r\nexport const getHebJewishMonths = (): IdText[] => {\r\n\r\n    return [{\r\n        id: 'Tishri',\r\n        text: 'תשרי',\r\n    },\r\n    {\r\n        id: 'Heshvan',\r\n        text: 'חשון',\r\n    },\r\n    {\r\n        id: 'Kislev',\r\n        text: 'כסלו',\r\n    },\r\n    {\r\n        id: 'Tevet',\r\n        text: 'טבת',\r\n    },\r\n    {\r\n        id: 'Shevat',\r\n        text: 'שבט',\r\n    },\r\n    {\r\n        id: 'AdarI',\r\n        text: 'אדר א',\r\n    },\r\n    {\r\n        id: 'AdarII',\r\n        text: 'אדר ב',\r\n    },\r\n    {\r\n        id: 'Nisan',\r\n        text: 'ניסן',\r\n    },\r\n    {\r\n        id: 'Iyyar',\r\n        text: 'אייר',\r\n    },\r\n    {\r\n        id: 'Sivan',\r\n        text: 'סיון',\r\n    },\r\n    {\r\n        id: 'Tammuz',\r\n        text: 'תמוז',\r\n    },\r\n    {\r\n        id: 'Av',\r\n        text: 'אב',\r\n    },\r\n    {\r\n        id: 'Elul',\r\n        text: 'אלול'\r\n    }];\r\n};\r\n\r\nexport const getEngJewishMonths = (): IdText[] => {\r\n\r\n    return [{\r\n        id: 'Tishri',\r\n        text: 'Tishri',\r\n    },\r\n    {\r\n        id: 'Heshvan',\r\n        text: 'Heshvan',\r\n    },\r\n    {\r\n        id: 'Kislev',\r\n        text: 'Kislev',\r\n    },\r\n    {\r\n        id: 'Tevet',\r\n        text: 'Tevet',\r\n    },\r\n    {\r\n        id: 'Shevat',\r\n        text: 'Shevat',\r\n    },\r\n    {\r\n        id: 'AdarI',\r\n        text: 'AdarI',\r\n    },\r\n    {\r\n        id: 'AdarII',\r\n        text: 'AdarII',\r\n    },\r\n    {\r\n        id: 'Nisan',\r\n        text: 'Nisan',\r\n    },\r\n    {\r\n        id: 'Iyyar',\r\n        text: 'Iyyar',\r\n    },\r\n    {\r\n        id: 'Sivan',\r\n        text: 'Sivan',\r\n    },\r\n    {\r\n        id: 'Tammuz',\r\n        text: 'Tammuz',\r\n    },\r\n    {\r\n        id: 'Av',\r\n        text: 'Av',\r\n    },\r\n    {\r\n        id: 'Elul',\r\n        text: 'Elul',\r\n    }];\r\n};\r\n\r\nexport const getJewishMonths = (year: number, isHebrew?: boolean): IdText[] => {\r\n    const months = isHebrew ? getHebJewishMonths() : getEngJewishMonths();\r\n\r\n    if (isMeubar(year)) {\r\n        return months;\r\n    } else {\r\n        return months.filter(month => month.id !== 'AdarII').map(month => {\r\n            if (month.id == 'AdarI') {\r\n                return {\r\n                    id: 'AdarI',\r\n                    text: isHebrew ? 'אדר' : 'Adar',\r\n                }\r\n\r\n            } else {\r\n                return month;\r\n            }\r\n        })\r\n    }\r\n};\r\n\r\nexport const getJewishYears = (year: number = 5780): number[] => {\r\n    const years: number[] = [];\r\n    for (let i = 100; i > 0; i--) {\r\n        const element = year - i;\r\n        years.push(element);\r\n    }\r\n    years.push(year);\r\n    for (let i = 1; i <= 100; i++) {\r\n        const element = year + i;\r\n        years.push(element);\r\n\r\n    }\r\n    return years;\r\n\r\n};\r\n\r\nexport const getPrevMonth = (basicJewishMonthInfo: BasicJewishMonthInfo): BasicJewishMonthInfo => {\r\n    const result = { ...basicJewishMonthInfo };\r\n    const months = getJewishMonths(basicJewishMonthInfo.year, basicJewishMonthInfo.isHebrew);\r\n\r\n    const monthIndex = months.map((month) => month.id).indexOf(basicJewishMonthInfo.month);\r\n\r\n    if (monthIndex !== -1) {\r\n        if (monthIndex === 0) {\r\n            result.month = months[months.length - 1].id;\r\n            result.year--;\r\n\r\n        } else {\r\n            result.month = months[monthIndex - 1].id;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const getNextMonth = (basicJewishMonthInfo: BasicJewishMonthInfo): BasicJewishMonthInfo => {\r\n    const result = { ...basicJewishMonthInfo };\r\n    const months = getJewishMonths(basicJewishMonthInfo.year);\r\n    const monthIndex = months.map((month) => month.id).indexOf(basicJewishMonthInfo.month);\r\n\r\n    if (monthIndex !== -1) {\r\n        if (monthIndex === (months.length - 1)) {\r\n            result.month = months[0].id;\r\n            result.year++;\r\n\r\n        } else {\r\n            result.month = months[monthIndex + 1].id;\r\n        }\r\n    }\r\n    return result;\r\n};\r\n\r\nexport const getGregDate = (props: BasicJewishDate): Date => {\r\n    if (!props || props.monthName === '' || props.year < 1 || props.day < 1) {\r\n        return new Date();\r\n    }\r\n    if (props.monthName === 'Heshvan') {\r\n        props.monthName = 'Cheshvan';\r\n    }\r\n    const day = new HeDate.HDate(props.day, props.monthName, props.year);\r\n\r\n    return day.greg();\r\n}\r\n\r\nexport const getJewishMonthInfo = (date: Date): JewishMonthInfo => {\r\n    const jewishDate: JewishDate = getJewishDate(date);\r\n    const startOfJewishMonth = dayjs(date).subtract(jewishDate.day - 1, 'day');\r\n    const dayOfWeek: number = Number(startOfJewishMonth.format(\"d\"));\r\n    const sundayStartOfTheMonth = startOfJewishMonth.subtract(dayOfWeek, 'day');\r\n    return { jewishDate, jewishMonth: jewishDate.month, startOfJewishMonth, sundayStartOfTheMonth }\r\n}\r\n\r\nexport const formatJewishDate = (jewishDate: JewishDate): string => {\r\n    return `${jewishDate.day} ${jewishDate.monthName} ${jewishDate.year}`;\r\n}\r\n\r\nexport const formatJewishDateHebrew = (jewishDate: JewishDate): string => {\r\n    return `${convertToHebrew(jewishDate.day)} ${getHebJewishMonthById(jewishDate.monthName)} ${convertToHebrew(jewishDate.year)}`;\r\n}\r\n\r\nexport const getJewishDate = (date: Date): JewishDate => {\r\n    const hebDate = hebrewDate(date);\r\n\r\n    return {\r\n        year: hebDate.year,\r\n        month: hebDate.month,\r\n        day: hebDate.date,\r\n        monthName: hebDate.month_name\r\n    }\r\n}\r\nexport const IsJewishDatesEqual = (jewishDate1: JewishDate, jewishDate2: JewishDate): boolean => {\r\n    return jewishDate1 && jewishDate2 && jewishDate1.day === jewishDate2.day && jewishDate1.month === jewishDate2.month && jewishDate1.year === jewishDate2.year;\r\n}\r\n\r\nexport const getJewishMonth = (date: Date): JewishMonth => {\r\n    const jewishMonthInfo = getJewishMonthInfo(date);\r\n\r\n    const jewishMonth: JewishMonth = { selectedDay: null,  jewishMonth: jewishMonthInfo.jewishMonth, jewishYear: jewishMonthInfo.jewishDate.year, jewishMonthString: jewishMonthInfo.jewishDate.monthName, days: [] };\r\n    let currentDate = jewishMonthInfo.sundayStartOfTheMonth;\r\n\r\n    for (let i = 0; i < 42; i++) {\r\n\r\n        const jewishDate: JewishDate = getJewishDate(currentDate.toDate());\r\n        const day: JewishDay = {\r\n            day: jewishDate.day,\r\n            jewishDateStr: formatJewishDate(jewishDate),\r\n            jewishDateStrHebrew: formatJewishDateHebrew(jewishDate),\r\n            jewishDate: jewishDate,\r\n            dayjsDate: currentDate,\r\n            date: currentDate.toDate(),\r\n            isCurrentMonth: jewishMonth.jewishMonth === jewishDate.month\r\n        }\r\n        if (IsJewishDatesEqual(jewishMonthInfo.jewishDate, jewishDate)) {\r\n            jewishMonth.selectedDay = day;\r\n        }\r\n        if (i < 7 || day.isCurrentMonth || day.date.getDay() > 0) {\r\n            jewishMonth.days.push(day);\r\n            currentDate = currentDate.add(1, 'day');\r\n        }\r\n\r\n    }\r\n\r\n    return jewishMonth;\r\n}","export const isFromTest = () => {\r\n    return typeof process !== 'undefined' && process.env?.JEST_WORKER_ID !== undefined;\r\n};\r\n\r\nexport const getTestID = (testId: string) => {\r\n    return isFromTest() ? testId :  undefined;\r\n};\r\n","import * as React from 'react';\r\nimport \"./reactJewishDatePicker.scss\";\r\nimport { JewishDay, BasicJewishDay, convertToHebrew, JewishDate, IsJewishDatesEqual } from 'jewish-dates-core';\r\nimport { isFromTest } from './utils';\r\n\r\nexport interface DayProps extends JewishDay {\r\n    isHebrew?: boolean;\r\n    selectedDay: BasicJewishDay;\r\n    onClick: (day: BasicJewishDay) => void;\r\n}\r\n\r\nexport const Day: React.FC<DayProps> = (props: DayProps) => {\r\n    \r\n\r\n    const handleClick = () => {\r\n        const { isHebrew, selectedDay, isCurrentMonth, day, dayjsDate, ...basicJewishDay } = props;\r\n        props?.onClick(basicJewishDay);\r\n    };\r\n\r\n    const day = (props.isHebrew ? convertToHebrew(props.day, false, false) : props.day);\r\n    const title = props.isHebrew ? props.jewishDateStrHebrew : props.jewishDateStr;\r\n\r\n\r\n    const otherMonthClass = (!props.isCurrentMonth ? \" otherMonth\" : \"\");\r\n    const selectedDayClass = props.selectedDay && (IsJewishDatesEqual(props.jewishDate, props.selectedDay.jewishDate) ? \" selectedDay\" : \"\");\r\n    const classNames = `day${otherMonthClass}${selectedDayClass}`;\r\n\r\n    return (\r\n        <div data-testid={isFromTest() ? title : undefined} className={classNames} title={title} onClick={handleClick}>\r\n            {day}\r\n        </div>\r\n    )\r\n}\r\n","import * as React from 'react';\r\nimport \"./reactJewishDatePicker.scss\";\r\n\r\nexport interface WeekdayProps {\r\n    value: string;\r\n}\r\n\r\nexport const Weekday: React.FC<WeekdayProps> = (props: WeekdayProps) => {\r\n\r\n    return (\r\n        <div className=\"weekday\" >\r\n            {props.value}\r\n        </div>\r\n    )\r\n}","import * as React from 'react';\r\nimport \"./reactJewishDatePicker.scss\";\r\nimport { getJewishMonths, getJewishYears, getPrevMonth, getNextMonth, convertToHebrew } from 'jewish-dates-core';\r\nimport { getTestID } from './utils';\r\n\r\n\r\nexport interface NavigationProps {\r\n    isHebrew?: boolean;\r\n    month: string;\r\n    year: number;\r\n    onClick: (month: string, year: number) => void;\r\n}\r\n\r\nexport const Navigation: React.FC<NavigationProps> = (props: NavigationProps) => {\r\n    return (\r\n        <div className={`navigation`}>\r\n            <div className={`arrowLeft`} data-testid={getTestID('prev')} onClick={() => {\r\n                const basicJewishMonthInfo = getPrevMonth({ month: props.month, year: props.year, isHebrew: props.isHebrew });\r\n                props.onClick(basicJewishMonthInfo.month, basicJewishMonthInfo.year);\r\n            }}><span></span></div>\r\n            <div className={`monthYearSelection`}>\r\n                <select data-testid={getTestID('month')} value={props.month} onChange={(e: React.SyntheticEvent<HTMLSelectElement>) => {\r\n                    const month = e.currentTarget.value;\r\n                    props.onClick(month, props.year);\r\n                }}>\r\n                    {getJewishMonths(props.year, props.isHebrew).map(month => {\r\n                        return (<option data-testid={getTestID(month.text)} key={month.id} value={month.id}>{month.text}</option>);\r\n                    })}\r\n                </select>\r\n\r\n                <select data-testid={getTestID('year')} value={props.year} onChange={(e: React.SyntheticEvent<HTMLSelectElement>) => {\r\n                    const year = Number(e.currentTarget.value);\r\n                    props.onClick(props.month, year);\r\n                }}>\r\n                    {getJewishYears(props.year).map(y => {\r\n                        const text = props.isHebrew ? convertToHebrew(y) : y;\r\n                        return (<option data-testid={getTestID(y.toString())}  key={y} value={y}>{text}</option>);\r\n                    })}\r\n                </select>\r\n            </div>\r\n            <div className={`arrowRight`} data-testid={getTestID('next')} onClick={() => {\r\n                const basicJewishMonthInfo = getNextMonth({ month: props.month, year: props.year, isHebrew: props.isHebrew });\r\n                props.onClick(basicJewishMonthInfo.month, basicJewishMonthInfo.year);\r\n            }}>\r\n                <span></span>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\n","import * as React from 'react';\r\nimport useOnClickOutside from 'use-onclickoutside';\r\nimport \"./reactJewishDatePicker.scss\";\r\nimport { getJewishMonth, getWeekdays, getGregDate, BasicJewishDay, BasicJewishDate, isValidDate } from 'jewish-dates-core';\r\n\r\nimport { Day } from './day';\r\nimport { Weekday } from './weekday';\r\nimport { Navigation } from './navigation';\r\nimport { getTestID } from './utils';\r\n\r\nexport interface ReactJewishDatePickerProps {\r\n    className?: string;\r\n    onClick: (day: BasicJewishDay) => void;\r\n    value?: BasicJewishDate | Date;\r\n    isHebrew: boolean;\r\n}\r\n\r\nexport const ReactJewishDatePicker: React.FC<ReactJewishDatePickerProps> = (props: ReactJewishDatePickerProps) => {\r\n    if (typeof props.value == 'string') {\r\n        throw new Error(\"ReactJewishDatePicker: The value can be BasicJewishDate or Date. for Dates use 'value={new Date()}' not 'value={Date()}\");\r\n    }\r\n    // const month = getJewishMonth(new Date(\"2020-05-24\"));\r\n    const dateInit = isValidDate(props.value) ? props.value : getGregDate(props.value);\r\n    const [date, setDate] = React.useState(dateInit);\r\n    const jewishMonth = getJewishMonth(date);\r\n\r\n    const [selectedDay, setSelectedDay] = React.useState<BasicJewishDay>(props.value && jewishMonth.selectedDay);\r\n    const [isOpen, setOpen] = React.useState(false);\r\n    const ref = React.useRef(null)\r\n    useOnClickOutside(ref, () => {\r\n        setOpen(false);\r\n    });\r\n\r\n    const handleClick = (day: BasicJewishDay) => {\r\n        const fullDate = props.isHebrew ? day.jewishDateStrHebrew : day.jewishDateStr;\r\n\r\n        setSelectedDay(day);\r\n        props?.onClick(day); \r\n        setOpen(!isOpen)\r\n    };\r\n\r\n    const setBasicJewishDate = (basicJewishDate: BasicJewishDate) => {\r\n        const gregDate = getGregDate(basicJewishDate);\r\n        setDate(gregDate);\r\n    }; \r\n\r\n    const handleNavigationClick = (month: string, year: number) => {\r\n        const basicJewishDate: BasicJewishDate = { year: year, monthName: month, day: jewishMonth.selectedDay.day } ;\r\n        setBasicJewishDate(basicJewishDate);\r\n    }; \r\n\r\n    const classNames = `reactJewishDatePicker${props.isHebrew ? ` isHebrew` : ''} ${props.className || ''}`;\r\n    const selectedDayClass = selectedDay && (props.isHebrew ? selectedDay.jewishDateStrHebrew : selectedDay.jewishDateStr);\r\n    return (\r\n        <div ref={ref} className={classNames}>\r\n            <div  data-testid={getTestID('selectedDate')} onClick={() => setOpen(!isOpen)} className={`selectedDate`}>{selectedDayClass}</div>\r\n            <div className={`monthWrapper ${isOpen ? `open` : ``}`}>\r\n                <Navigation month={jewishMonth.jewishMonthString} year={jewishMonth.jewishYear} isHebrew={props.isHebrew} onClick={handleNavigationClick} />\r\n                <div className={`month`}>\r\n                    {getWeekdays(props.isHebrew).map((weekday, index) => {\r\n                        return <Weekday key={index} value={weekday} />\r\n                    })}\r\n                    {jewishMonth.days.map((day, index) => {\r\n                        return <Day key={index} {...day} onClick={handleClick} selectedDay={selectedDay} isHebrew={props.isHebrew} />\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import * as React from 'react';\r\nimport \"./ReactJewishDatePickerExample.scss\";\r\nimport { ReactJewishDatePicker, BasicJewishDay, BasicJewishDate } from 'react-jewish-datepicker';\r\n\r\nexport interface ReactJewishDatePickerExampleProps {\r\n    isHebrew?: boolean;\r\n    value?: BasicJewishDate | Date;\r\n}\r\n\r\nexport const ReactJewishDatePickerExample: React.FC<ReactJewishDatePickerExampleProps> = (props: ReactJewishDatePickerExampleProps) => {\r\n    const [basicJewishDay, setBasicJewishDay] = React.useState<BasicJewishDay | undefined>(undefined);\r\n    const [isHebrew, setIsHebrew] = React.useState<boolean>(!!props.isHebrew);\r\n\r\n\r\n    return (\r\n        <div className=\"reactJewishDatePickerExample\">\r\n            <label className=\"switch\">\r\n                <input type=\"checkbox\" value=\"true\" checked={isHebrew} onChange={() => setIsHebrew(!isHebrew)} />\r\n                Hebrew View:\r\n            </label>\r\n            <ReactJewishDatePicker isHebrew={isHebrew} value={props.value} onClick={(day: BasicJewishDay) => {\r\n                setBasicJewishDay(day);\r\n            }}></ReactJewishDatePicker>\r\n            <div className=\"basicJewishDayInfo\">\r\n                {basicJewishDay ? <div>Day value:</div> : null}\r\n                <pre >{JSON.stringify(basicJewishDay, null, 2)}</pre>\r\n            </div>\r\n        </div >\r\n    )\r\n};\r\n\r\nReactJewishDatePickerExample.defaultProps = {\r\n    isHebrew: false\r\n};\r\n","import * as React from 'react';\r\nimport { ReactJewishDatePickerExample } from './reactJewishDatePickerExample';\r\nimport './app.css';\r\nimport { BasicJewishDate } from 'react-jewish-datepicker';\r\n\r\nexport function App() {\r\n  const date: Date = new Date();\r\n\r\n  const basicJewishDate: BasicJewishDate = {\r\n    day: 13,\r\n    monthName: \"Elul\",\r\n    year: 5788\r\n  };\r\n return (\r\n    <div className=\"app\">\r\n      <ReactJewishDatePickerExample value={date} />\r\n      <ReactJewishDatePickerExample value={basicJewishDate} isHebrew />\r\n    </div>\r\n  );\r\n}\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport  { App } from './app';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}